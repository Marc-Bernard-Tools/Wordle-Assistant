"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.String = void 0;
const _parse_1 = require("../operators/_parse");
const character_1 = require("./character");
const integer_1 = require("./integer");
class String {
    constructor(input) {
        this.value = "";
        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;
    }
    getQualifiedName() {
        return this.qualifiedName;
    }
    set(value) {
        if (typeof value === "string") {
            this.value = value;
        }
        else if (typeof value === "number") {
            this.value = value.toString();
        }
        else if (value instanceof character_1.Character) {
            // replace trailing blanks if the source is a Character string
            this.value = value.getTrimEnd();
        }
        else if (value instanceof integer_1.Integer) {
            const lv_sign = (parseInt(value.get(), 10) >= 0) ? " " : "-";
            this.value = value.get() + lv_sign;
        }
        else {
            this.value = value.get() + "";
        }
        return this;
    }
    clear() {
        this.value = "";
    }
    get() {
        return this.value;
    }
    getOffset(input) {
        if (input === null || input === void 0 ? void 0 : input.offset) {
            input.offset = (0, _parse_1.parse)(input.offset);
        }
        if (input === null || input === void 0 ? void 0 : input.length) {
            input.length = (0, _parse_1.parse)(input.length);
        }
        if ((input.offset && input.offset > this.value.length)
            || (input.offset && input.offset < 0)
            || (input.length && input.length < 0)) {
            // @ts-ignore
            if (abap.Classes["CX_SY_RANGE_OUT_OF_BOUNDS"] !== undefined) {
                // @ts-ignore
                throw new abap.Classes["CX_SY_RANGE_OUT_OF_BOUNDS"]();
            }
            else {
                throw "Global class CX_SY_RANGE_OUT_OF_BOUNDS not found";
            }
        }
        let ret = this.value;
        if (input === null || input === void 0 ? void 0 : input.offset) {
            // @ts-ignore
            ret = ret.substr(input.offset);
        }
        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {
            // @ts-ignore
            ret = ret.substr(0, input.length);
        }
        const r = new String();
        r.set(ret);
        return r;
    }
}
exports.String = String;
//# sourceMappingURL=string.js.map