"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Integer = void 0;
const float_1 = require("./float");
const hex_1 = require("./hex");
const xstring_1 = require("./xstring");
class Integer {
    constructor(input) {
        this.value = 0;
        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;
    }
    getQualifiedName() {
        return this.qualifiedName;
    }
    set(value) {
        if (typeof value === "number") {
            this.value = value;
        }
        else if (typeof value === "string" && value.trim().length === 0) {
            this.value = 0;
        }
        else if (typeof value === "string") {
            if (/^\s*-?\+?\d+\.?\d*$/i.test(value) === false) {
                // @ts-ignore
                if (abap.Classes["CX_SY_CONVERSION_NO_NUMBER"] !== undefined) {
                    // @ts-ignore
                    throw new abap.Classes["CX_SY_CONVERSION_NO_NUMBER"]();
                }
                else {
                    throw "Global class CX_SY_CONVERSION_NO_NUMBER not found";
                }
            }
            this.value = parseInt(value, 10);
        }
        else if (value instanceof float_1.Float) {
            this.set(Math.round(value.getRaw()));
        }
        else if (value instanceof hex_1.Hex || value instanceof xstring_1.XString) {
            let num = parseInt(value.get(), 16);
            // handle two complement,
            if (value instanceof hex_1.Hex && value.getLength() >= 4) {
                const maxVal = Math.pow(2, value.get().length / 2 * 8);
                if (num > maxVal / 2 - 1) {
                    num = num - maxVal;
                }
            }
            this.set(num);
        }
        else {
            this.set(value.get());
        }
        return this;
    }
    clear() {
        this.value = 0;
    }
    get() {
        return this.value;
    }
}
exports.Integer = Integer;
//# sourceMappingURL=integer.js.map