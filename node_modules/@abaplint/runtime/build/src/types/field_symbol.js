"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldSymbol = void 0;
const table_1 = require("./table");
const string_1 = require("./string");
const hex_1 = require("./hex");
const _parse_1 = require("../operators/_parse");
class FieldSymbol {
    constructor(type) {
        this.pointer = undefined;
        this.casting = false;
        this.type = type;
    }
    assign(pointer) {
        this.pointer = pointer;
    }
    setCasting() {
        this.casting = true;
    }
    unassign() {
        this.pointer = undefined;
    }
    isAssigned() {
        return this.pointer !== undefined;
    }
    getPointer() {
        if (this.casting) {
            // todo, this wont work for everything, eg changing CASTING'ed values
            return this.get();
        }
        return this.pointer;
    }
    ///////////////
    clear() {
        var _a;
        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.clear();
    }
    get() {
        var _a, _b, _c;
        if (this.casting) {
            if (this.type instanceof hex_1.Hex) {
                // @ts-ignore
                const ret = new string_1.String().set(Buffer.from((_a = this.pointer) === null || _a === void 0 ? void 0 : _a.get(), "utf16le").toString("hex"));
                return ret.get();
            }
            else {
                // @ts-ignore
                const ret = new string_1.String().set(Buffer.from((_b = this.pointer) === null || _b === void 0 ? void 0 : _b.get(), "hex").toString("utf16le"));
                return ret.get();
            }
        }
        else {
            // @ts-ignore
            return (_c = this.pointer) === null || _c === void 0 ? void 0 : _c.get();
        }
    }
    appendInitial() {
        if (this.pointer instanceof table_1.Table) {
            return this.pointer.appendInitial();
        }
        return undefined;
    }
    array() {
        var _a;
        // @ts-ignore
        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.array();
    }
    set(value) {
        var _a;
        (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.set(value);
        return this;
    }
    getOffset(input) {
        if (input === null || input === void 0 ? void 0 : input.offset) {
            input.offset = (0, _parse_1.parse)(input.offset);
        }
        if (input === null || input === void 0 ? void 0 : input.length) {
            input.length = (0, _parse_1.parse)(input.length);
        }
        // Assuming we're interested in Strings here, for now...
        let ret = this.get();
        if (input === null || input === void 0 ? void 0 : input.offset) {
            ret = ret.substr(input.offset);
        }
        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {
            ret = ret.substr(0, input.length);
        }
        const r = new string_1.String();
        r.set(ret);
        return r;
    }
}
exports.FieldSymbol = FieldSymbol;
//# sourceMappingURL=field_symbol.js.map