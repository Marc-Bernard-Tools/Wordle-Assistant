import { INumeric } from "./_numeric";
import { ICharacter } from "./_character";
import { ABAPObject } from "./abap_object";
import { Structure } from "./structure";
import { FieldSymbol } from "./field_symbol";
import { DataReference } from "./data_reference";
export declare enum TableAccessType {
    standard = "STANDARD",
    sorted = "SORTED",
    hashed = "HASHED",
    index = "INDEX",
    any = "ANY"
}
export declare class LoopIndex {
    index: number;
    constructor(start: number);
}
export declare type ITableOptions = {
    type?: TableAccessType;
    keyFields?: string[];
    isUnique?: boolean;
    withHeader: boolean;
};
export declare type TableRowType = INumeric | Structure | ICharacter | Table | ABAPObject;
export declare class Table {
    private value;
    private readonly rowType;
    private readonly loops;
    private readonly options;
    private readonly qualifiedName;
    constructor(rowType: TableRowType, options?: ITableOptions, qualifiedName?: string);
    getQualifiedName(): string | undefined;
    getOptions(): ITableOptions | undefined;
    startLoop(start?: number): LoopIndex;
    unregisterLoop(loop: LoopIndex): void;
    getRowType(): TableRowType;
    array(): readonly any[];
    clear(): void;
    set(tab: Table): void;
    insertIndex(item: TableRowType, index: number): TableRowType;
    deleteIndex(index: number): void;
    append(item: TableRowType, cloneRow?: boolean): FieldSymbol | DataReference | TableRowType;
    appendInitial(): TableRowType;
    sort(compareFn: (a: TableRowType, b: TableRowType) => number): void;
    private getValue;
}
