"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Character = void 0;
const _parse_1 = require("../operators/_parse");
class Character {
    constructor(input) {
        this.length = (input === null || input === void 0 ? void 0 : input.length) ? input === null || input === void 0 ? void 0 : input.length : 1;
        if (this.length <= 0) {
            throw "Character, invalid length";
        }
        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;
        this.clear();
    }
    set(value) {
        if (typeof value === "string" || typeof value === "number") {
            this.value = value;
        }
        else {
            this.value = value.get() + "";
        }
        if (this.value.length > this.length) {
            this.value = this.value.substr(0, this.length);
            // todo, maintain consistent length
            //    } else if (this.value.length < this.length) {
            //      this.value.padEnd(this.length, " ");
        }
        return this;
    }
    getQualifiedName() {
        return this.qualifiedName;
    }
    getLength() {
        return this.length;
    }
    clear() {
        // todo, maintain consistent length
        //    this.value = " ".repeat(this.length);
        this.value = "";
    }
    get() {
        return this.value;
    }
    getTrimEnd() {
        return this.value.replace(/ *$/, "");
    }
    getOffset(input) {
        if (input === null || input === void 0 ? void 0 : input.offset) {
            input.offset = (0, _parse_1.parse)(input.offset);
        }
        if (input === null || input === void 0 ? void 0 : input.length) {
            input.length = (0, _parse_1.parse)(input.length);
        }
        if ((input.offset && input.offset >= this.length)
            || (input.offset && input.offset < 0)
            || (input.length && input.length < 0)) {
            // @ts-ignore
            if (abap.Classes["CX_SY_RANGE_OUT_OF_BOUNDS"] !== undefined) {
                // @ts-ignore
                throw new abap.Classes["CX_SY_RANGE_OUT_OF_BOUNDS"]();
            }
            else {
                throw "Global class CX_SY_RANGE_OUT_OF_BOUNDS not found";
            }
        }
        let ret = this.value;
        if (input === null || input === void 0 ? void 0 : input.offset) {
            // @ts-ignore
            ret = ret.substr(input.offset);
        }
        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {
            // @ts-ignore
            ret = ret.substr(0, input.length);
        }
        const r = new Character({ length: ret.length });
        r.set(ret);
        return r;
    }
}
exports.Character = Character;
//# sourceMappingURL=character.js.map