"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hex = void 0;
const _parse_1 = require("../operators/_parse");
const float_1 = require("./float");
const xstring_1 = require("./xstring");
class Hex {
    constructor(input) {
        this.length = (input === null || input === void 0 ? void 0 : input.length) ? input === null || input === void 0 ? void 0 : input.length : 1;
        this.value = "0".repeat(this.length * 2);
    }
    set(value) {
        if (typeof value === "string") {
            this.value = value;
        }
        else if (typeof value === "number") {
            if (value < 0) {
                const maxVal = Math.pow(2, this.length * 8);
                this.value = Math.round(value + maxVal).toString(16);
            }
            else {
                this.value = Math.round(value).toString(16);
            }
            this.value = this.value.padStart(this.length * 2, "0");
        }
        else {
            let v = value.get();
            if (value instanceof float_1.Float) {
                v = value.getRaw();
                this.set(v);
            }
            if (typeof v === "number") {
                this.set(v);
            }
            else {
                this.value = v;
                if (this.value.match(/^(?![A-F0-9])/)) {
                    this.value = "";
                }
            }
        }
        if (this.value.length > this.length * 2) {
            this.value = this.value.substr(0, this.length * 2);
        }
        if (this.value.length < this.length * 2) {
            this.value = this.value.padEnd(this.length * 2, "0");
        }
        this.value = this.value.toUpperCase();
    }
    getLength() {
        return this.length;
    }
    clear() {
        this.value = "";
    }
    get() {
        return this.value;
    }
    getOffset(input) {
        if (input === null || input === void 0 ? void 0 : input.offset) {
            input.offset = (0, _parse_1.parse)(input.offset);
        }
        if (input === null || input === void 0 ? void 0 : input.length) {
            input.length = (0, _parse_1.parse)(input.length);
        }
        let ret = this.value;
        if (input === null || input === void 0 ? void 0 : input.offset) {
            // @ts-ignore
            ret = ret.substr(input.offset * 2);
        }
        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {
            // @ts-ignore
            ret = ret.substr(0, input.length * 2);
        }
        const r = new xstring_1.XString();
        r.set(ret);
        return r;
    }
}
exports.Hex = Hex;
//# sourceMappingURL=hex.js.map