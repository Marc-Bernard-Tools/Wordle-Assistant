"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataReference = void 0;
const string_1 = require("./string");
const _parse_1 = require("../operators/_parse");
class DataReference {
    constructor(type) {
        this.pointer = undefined;
        this.type = type;
    }
    getType() {
        return this.type;
    }
    assign(pointer) {
        this.pointer = pointer;
    }
    unassign() {
        this.pointer = undefined;
    }
    getPointer() {
        return this.pointer;
    }
    ///////////////
    clear() {
        this.unassign();
        //    return this.pointer?.clear();
    }
    get() {
        var _a;
        if (this.pointer === this) {
            throw "Cyclic data reference";
        }
        // @ts-ignore
        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.get();
    }
    array() {
        var _a;
        // @ts-ignore
        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.array();
    }
    set(value) {
        var _a;
        if (value instanceof DataReference) {
            return this.pointer = value.getPointer();
        }
        else {
            return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.set(value);
        }
    }
    getOffset(input) {
        if (input === null || input === void 0 ? void 0 : input.offset) {
            input.offset = (0, _parse_1.parse)(input.offset);
        }
        if (input === null || input === void 0 ? void 0 : input.length) {
            input.length = (0, _parse_1.parse)(input.length);
        }
        // Assuming we're interested in Strings here, for now...
        let ret = this.get();
        if (input === null || input === void 0 ? void 0 : input.offset) {
            ret = ret.substr(input.offset);
        }
        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {
            ret = ret.substr(0, input.length);
        }
        const r = new string_1.String();
        r.set(ret);
        return r;
    }
}
exports.DataReference = DataReference;
//# sourceMappingURL=data_reference.js.map