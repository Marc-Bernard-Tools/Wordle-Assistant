"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.templateFormatting = void 0;
const types_1 = require("./types");
function templateFormatting(source, options) {
    let text = "";
    if (source instanceof types_1.FieldSymbol && source.getPointer() === undefined) {
        throw "GETWA_NOT_ASSIGNED";
    }
    else if (source instanceof types_1.Table) {
        throw "STRG_ILLEGAL_DATA_TYPE";
    }
    else if (source instanceof types_1.Character) {
        text = source.getTrimEnd();
    }
    else {
        text = source.get() + "";
    }
    if ((options === null || options === void 0 ? void 0 : options.currency) !== undefined) {
        throw "template formatting with currency not supported";
    }
    if ((options === null || options === void 0 ? void 0 : options.timestamp) === "iso") {
        text = text.substr(0, 4) + "-" + text.substr(4, 2) + "-" + text.substr(6, 2) + "T" + text.substr(8, 2) + ":" + text.substr(10, 2) + ":" + text.substr(12, 2);
        if (text === "0--T::") {
            text = "0000-00-00T00:00:00";
        }
    }
    if ((options === null || options === void 0 ? void 0 : options.date) === "iso") {
        text = text.substr(0, 4) + "-" + text.substr(4, 2) + "-" + text.substr(6, 2);
    }
    if ((options === null || options === void 0 ? void 0 : options.time) === "iso") {
        text = text.substr(0, 2) + ":" + text.substr(2, 2) + ":" + text.substr(4, 2);
    }
    if ((options === null || options === void 0 ? void 0 : options.width) && options.pad) {
        if (options.align === "right") {
            text = text.trimEnd().padStart(options.width, options.pad);
        }
        else {
            text = text.trimEnd().padEnd(options.width, options.pad);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.width) {
        text = text.trimEnd().padEnd(options.width, " ");
    }
    else if ((options === null || options === void 0 ? void 0 : options.decimals) && source instanceof types_1.Integer) {
        text = source.get() + "." + "".padEnd(options.decimals, "0");
    }
    else if ((options === null || options === void 0 ? void 0 : options.decimals) && source instanceof types_1.Packed) {
        text = source.get().toFixed(options.decimals);
    }
    return text;
}
exports.templateFormatting = templateFormatting;
//# sourceMappingURL=template_formatting.js.map