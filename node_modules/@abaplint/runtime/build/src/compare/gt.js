"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gt = void 0;
const types_1 = require("../types");
const integer_1 = require("../types/integer");
function gt(left, right) {
    if (left instanceof types_1.Table || right instanceof types_1.Table) {
        throw "runtime_todo, gt TABLE";
    }
    if (left instanceof types_1.Hex || right instanceof types_1.Hex) {
        return gt_with_hex(left, right);
    }
    let l = undefined;
    if (typeof left === "number" || typeof left === "string") {
        l = left;
    }
    else if (left instanceof types_1.Float) {
        l = left.getRaw();
    }
    else {
        l = left.get();
    }
    let r = undefined;
    if (typeof right === "number" || typeof right === "string") {
        r = right;
    }
    else if (right instanceof types_1.Float) {
        r = right.getRaw();
    }
    else {
        r = right.get();
    }
    if (typeof l === "string" && typeof r === "number") {
        if (l === "") {
            l = 0;
        }
        else {
            l = parseInt(l, 10);
        }
    }
    else if (typeof l === "number" && typeof r === "string") {
        if (r === "") {
            r = 0;
        }
        else {
            r = parseInt(r, 10);
        }
    }
    if (l === undefined) {
        return true; // todo, not sure this is correct
    }
    if (r === undefined) {
        return true; // todo, not sure this is correct
    }
    return l > r;
}
exports.gt = gt;
function gt_with_hex(left, right) {
    const left_hex = get_hex_from_parameter(left);
    const right_hex = get_hex_from_parameter(right);
    return left_hex > right_hex;
}
function get_hex_from_parameter(comparison_part) {
    let hex_from_parameter = "";
    switch (typeof comparison_part) {
        case "number":
            hex_from_parameter = comparison_part.toString(16);
            break;
        case "string":
            hex_from_parameter = comparison_part.split("")
                .map(c => c.charCodeAt(0).toString(16).padStart(2, "0"))
                .join("");
            break;
        case "object":
            if (comparison_part instanceof types_1.Hex) {
                hex_from_parameter = comparison_part.get();
            }
            else if (comparison_part instanceof integer_1.Integer) {
                hex_from_parameter = comparison_part.get().toString(16).toUpperCase();
                if (hex_from_parameter.length % 2 === 1) {
                    hex_from_parameter = "0" + hex_from_parameter;
                }
            }
            else if (comparison_part instanceof types_1.XString) {
                hex_from_parameter = comparison_part.get();
            }
            else {
                throw "runtime_todo, gt hex1";
            }
            break;
        default:
            throw "runtime_todo, gt hex2";
    }
    return hex_from_parameter;
}
//# sourceMappingURL=gt.js.map