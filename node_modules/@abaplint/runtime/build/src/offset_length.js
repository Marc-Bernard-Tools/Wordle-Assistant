"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OffsetLength = void 0;
const types_1 = require("./types");
class OffsetLength {
    constructor(obj, options) {
        this.obj = obj;
        this.isHex = obj instanceof types_1.Hex || obj instanceof types_1.XString;
        if (options.offset) {
            if (typeof options.offset === "number") {
                this.offset = options.offset;
            }
            else {
                this.offset = options.offset.get();
            }
            if (this.isHex) {
                this.offset *= 2;
            }
        }
        if (options.length) {
            if (typeof options.length === "number") {
                this.length = options.length;
            }
            else {
                this.length = options.length.get();
            }
            if (this.isHex) {
                this.length *= 2;
            }
        }
    }
    get() {
        return this.obj.getOffset({ offset: this.offset, length: this.length }).get();
    }
    set(value) {
        let val = "";
        if (typeof value === "string") {
            val = value;
        }
        else if (typeof value === "number") {
            val = value + "";
        }
        else if (value instanceof types_1.Integer) {
            val = value.get() + "";
            if (this.isHex) {
                val = Number(val).toString(16);
            }
        }
        else {
            val = value.get() + "";
        }
        let old = this.obj.get();
        if (this.obj instanceof types_1.Character) {
            old = old.padEnd(this.obj.getLength(), " ");
        }
        if (this.length) {
            val = val.substr(0, this.length);
            if (this.isHex || this.obj instanceof types_1.Time) {
                val = val.padStart(this.length, "0");
            }
        }
        if (this.length && this.offset) {
            old = old.substr(0, this.offset) + val + old.substr(this.offset + this.length);
        }
        else if (this.length) {
            old = val + old.substr(this.length);
        }
        else if (this.offset) {
            old = old.substr(0, this.offset) + val;
        }
        old = old.trimEnd();
        if (this.obj instanceof types_1.Character) {
            old = old.padEnd(this.obj.getLength(), " ");
        }
        this.obj.set(old);
    }
}
exports.OffsetLength = OffsetLength;
//# sourceMappingURL=offset_length.js.map