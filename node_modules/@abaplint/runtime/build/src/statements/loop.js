"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loop = void 0;
const types_1 = require("../types");
function loop(table, options) {
    return __asyncGenerator(this, arguments, function* loop_1() {
        if (table === undefined) {
            throw new Error("LOOP at undefined");
        }
        else if (table instanceof types_1.FieldSymbol) {
            // @ts-ignore
            yield __await(yield* __asyncDelegator(__asyncValues(loop(table.getPointer(), options))));
            return yield __await(void 0);
        }
        const length = table.array().length;
        if (length === 0) {
            // @ts-ignore
            abap.builtin.sy.get().subrc.set(4);
            return yield __await(void 0);
        }
        const loopFrom = (options === null || options === void 0 ? void 0 : options.from) && (options === null || options === void 0 ? void 0 : options.from.get()) > 0 ? options.from.get() - 1 : 0;
        let loopTo = (options === null || options === void 0 ? void 0 : options.to) && options.to.get() < length ? options.to.get() : length;
        const loopIndex = table.startLoop(loopFrom);
        let entered = false;
        try {
            const array = table.array();
            const isStructured = array[0] instanceof types_1.Structure;
            while (loopIndex.index < loopTo) {
                if (loopIndex.index > array.length) {
                    break;
                }
                const current = array[loopIndex.index];
                if (options === null || options === void 0 ? void 0 : options.where) {
                    const row = isStructured ? current.get() : { table_line: current };
                    if ((yield __await(options.where(row))) === false) {
                        loopIndex.index++;
                        continue;
                    }
                }
                // @ts-ignore
                abap.builtin.sy.get().tabix.set(loopIndex.index + 1);
                entered = true;
                yield yield __await(current);
                loopIndex.index++;
                loopTo = (options === null || options === void 0 ? void 0 : options.to) && options.to.get() < array.length ? options.to.get() : array.length;
            }
        }
        finally {
            table.unregisterLoop(loopIndex);
            // @ts-ignore
            abap.builtin.sy.get().subrc.set(entered ? 0 : 4);
        }
    });
}
exports.loop = loop;
//# sourceMappingURL=loop.js.map