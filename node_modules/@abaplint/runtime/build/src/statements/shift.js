"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shift = void 0;
const compare_1 = require("../compare");
function shift(target, options) {
    if ((options === null || options === void 0 ? void 0 : options.mode) === "BYTE") {
        shift_byte_mode(target, options);
    }
    else {
        shift_character_mode(target, options);
    }
}
exports.shift = shift;
function shift_character_mode(target, options) {
    let value = target.get();
    if (options === null || options === void 0 ? void 0 : options.deletingLeading) {
        let leading = options.deletingLeading;
        if (typeof leading !== "string") {
            leading = leading.get();
        }
        const split = leading.split("");
        while (split.some(s => value.substr(0, 1) === s)) {
            value = value.substr(1);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.deletingTrailing) {
        let trailing = options.deletingTrailing;
        if (typeof trailing !== "string") {
            trailing = trailing.get();
        }
        if ((0, compare_1.co)(value, " ") === false) {
            while (value.endsWith(trailing)) {
                value = " ".repeat(trailing.length) + value.substring(0, value.length - trailing.length);
            }
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.places) {
        const p = options.places.get();
        if (options.circular) {
            value = value.substr(p) + value.substr(0, p);
        }
        else {
            value = value.substr(p);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.to) {
        let to = "";
        if (typeof options.to === "string") {
            to = options.to;
        }
        else {
            to = options.to.get();
        }
        const index = value.search(to);
        if (index > 0) {
            value = value.substr(index);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.circular) {
        value = value.substr(1) + value.substr(0, 1);
    }
    else {
        value = value.substr(1);
    }
    target.set(value);
}
function shift_byte_mode(target, options) {
    let value = target.get();
    if (options === null || options === void 0 ? void 0 : options.deletingLeading) {
        let leading = options.deletingLeading;
        if (typeof leading !== "string") {
            leading = leading.get();
        }
        const split = leading.split("");
        while (split.some(s => value.substr(0, 2) === s)) {
            value = value.substr(2);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.places) {
        const p = options.places.get() * 2;
        if (options.circular) {
            value = value.substr(p) + value.substr(0, p);
        }
        else {
            value = value.substr(p);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.to) {
        let to = "";
        if (typeof options.to === "string") {
            to = options.to;
        }
        else {
            to = options.to.get();
        }
        const index = value.search(to);
        if (index > 0) {
            value = value.substr(index);
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.circular) {
        value = value.substr(2) + value.substr(0, 2);
    }
    else {
        value = value.substr(2);
    }
    target.set(value);
}
//# sourceMappingURL=shift.js.map