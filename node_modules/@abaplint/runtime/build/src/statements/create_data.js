"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createData = void 0;
const clone_1 = require("../clone");
const types_1 = require("../types");
function throwGlobalException(name) {
    // @ts-ignore
    if (abap.Classes[name] !== undefined) {
        // @ts-ignore
        throw new abap.Classes[name]();
    }
    else {
        throw `Global class ${name} not found`;
    }
}
function createData(target, options) {
    //  console.dir(options);
    if ((options === null || options === void 0 ? void 0 : options.name) && (options === null || options === void 0 ? void 0 : options.table)) {
        // @ts-ignore
        if (abap.DDIC[options.name] === undefined) {
            throwGlobalException("CX_SY_CREATE_DATA_ERROR");
        }
        // @ts-ignore
        target.assign(new abap.types.Table(abap.DDIC[options.name].type));
    }
    else if (options === null || options === void 0 ? void 0 : options.name) {
        // @ts-ignore
        if (abap.DDIC[options.name] === undefined) {
            throwGlobalException("CX_SY_CREATE_DATA_ERROR");
        }
        // @ts-ignore
        target.assign((0, clone_1.clone)(abap.DDIC[options.name].type));
    }
    else if (options === null || options === void 0 ? void 0 : options.typeName) {
        switch (options.typeName) {
            case "C":
                {
                    let length = 1;
                    if (options.length) {
                        length = options.length.get();
                    }
                    target.assign(new types_1.Character({ length: length }));
                }
                break;
            case "X":
                {
                    let length = 1;
                    if (options.length) {
                        length = options.length.get();
                    }
                    target.assign(new types_1.Hex({ length: length }));
                }
                break;
            case "P":
                {
                    let length = 1;
                    if (options.length) {
                        length = options.length.get();
                    }
                    target.assign(new types_1.Packed({ length: length }));
                }
                break;
            case "F":
                target.assign(new types_1.Float());
                break;
            case "D":
                target.assign(new types_1.Date());
                break;
            case "T":
                target.assign(new types_1.Time());
                break;
            case "I":
                target.assign(new types_1.Integer());
                break;
            case "STRING":
                target.assign(new types_1.String());
                break;
            case "XSTRING":
                target.assign(new types_1.XString());
                break;
            default:
                throw "CREATE DATA, unknown type " + options.typeName;
        }
    }
    else if (options === null || options === void 0 ? void 0 : options.type) {
        target.assign((0, clone_1.clone)(options.type));
    }
    else if (options === null || options === void 0 ? void 0 : options.likeLineOf) {
        if (options.likeLineOf instanceof types_1.FieldSymbol) {
            options.likeLineOf = options.likeLineOf.getPointer();
        }
        target.assign((0, clone_1.clone)(options.likeLineOf.getRowType()));
    }
    else if (options === null || options === void 0 ? void 0 : options.like) {
        if (options.like instanceof types_1.FieldSymbol) {
            options.like = options.like.getPointer();
        }
        target.assign((0, clone_1.clone)(options.like));
    }
    else {
        target.assign((0, clone_1.clone)(target.getType()));
    }
}
exports.createData = createData;
//# sourceMappingURL=create_data.js.map