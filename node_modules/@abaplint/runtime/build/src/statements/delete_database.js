"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteDatabase = void 0;
const types_1 = require("../types");
class DeleteDatabase {
    constructor(context) {
        this.context = context;
    }
    async deleteDatabase(table, options) {
        if (options.table instanceof types_1.FieldSymbol) {
            options.table = options.table.getPointer();
        }
        if (options.from instanceof types_1.FieldSymbol) {
            options.from = options.from.getPointer();
        }
        if (typeof table !== "string") {
            table = table.get();
        }
        if (options.table) {
            for (const row of options.table.array()) {
                this.deleteDatabase(table, { from: row });
            }
        }
        else if (options.from) {
            let where = [];
            const structure = options.from.get();
            for (const k of Object.keys(structure)) {
                // todo, integers should not be surrounded by '"'?
                const str = k + ' = "' + structure[k].get() + '"';
                where.push(str);
            }
            where = where.join(" AND ");
            const { subrc, dbcnt } = await this.context.defaultDB().delete({ table, where });
            // @ts-ignore
            abap.builtin.sy.get().subrc.set(subrc);
            // @ts-ignore
            abap.builtin.sy.get().dbcnt.set(dbcnt);
        }
        else if (options.where) {
            const { subrc, dbcnt } = await this.context.defaultDB().delete({ table, where: options.where });
            // @ts-ignore
            abap.builtin.sy.get().subrc.set(subrc);
            // @ts-ignore
            abap.builtin.sy.get().dbcnt.set(dbcnt);
        }
        else {
            throw "deleteDatabase todo";
        }
    }
}
exports.DeleteDatabase = DeleteDatabase;
//# sourceMappingURL=delete_database.js.map