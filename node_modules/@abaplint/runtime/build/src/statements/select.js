"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectDatabase = void 0;
const clone_1 = require("../clone");
const types_1 = require("../types");
class SelectDatabase {
    constructor(context) {
        this.context = context;
    }
    async select(target, input, runtimeOptions) {
        var _a;
        const { rows: rows } = await this.context.defaultDB().select(input);
        if (target instanceof types_1.FieldSymbol) {
            if (target.isAssigned() === false) {
                throw "select, fs not assigned";
            }
            // @ts-ignore
            target = target.getPointer();
        }
        if ((runtimeOptions === null || runtimeOptions === void 0 ? void 0 : runtimeOptions.appending) !== true) {
            target === null || target === void 0 ? void 0 : target.clear();
        }
        if (rows.length === 0) {
            // @ts-ignore
            abap.builtin.sy.get().subrc.set(4);
            return;
        }
        if (target instanceof types_1.Structure) {
            const result = {};
            for (const column in rows[0]) {
                result[column] = (0, clone_1.clone)(target.get()[column]).set(rows[0][column]);
            }
            // @ts-ignore
            abap.statements.moveCorresponding(new types_1.Structure(result), target);
        }
        else if (target instanceof types_1.Table) {
            for (const row of rows) {
                const targetRow = (0, clone_1.clone)(target.getRowType());
                for (let columnName in row) {
                    columnName = columnName.toLowerCase();
                    // todo, non structured table = table with simple rows
                    // @ts-ignore
                    (_a = targetRow.get()[columnName]) === null || _a === void 0 ? void 0 : _a.set(row[columnName]);
                }
                // @ts-ignore
                abap.statements.insertInternal({ table: target, data: targetRow });
            }
        }
        else if (target !== undefined) {
            throw new Error("Runtime, SELECT todo");
        }
        if (target === undefined && rows.length === 1) {
            // @ts-ignore
            abap.builtin.sy.get().dbcnt.set(Object.values(rows[0])[0]);
        }
        else {
            // @ts-ignore
            abap.builtin.sy.get().dbcnt.set(rows.length);
        }
        // @ts-ignore
        abap.builtin.sy.get().subrc.set(0);
    }
}
exports.SelectDatabase = SelectDatabase;
//# sourceMappingURL=select.js.map