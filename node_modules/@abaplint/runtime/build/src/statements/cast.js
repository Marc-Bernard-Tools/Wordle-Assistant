"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cast = void 0;
const compare_1 = require("../compare");
// todo, field symbols as input?
// todo, local classes?
// check with javascript instanceof?
// handling interfaces?
async function cast(target, source) {
    var _a;
    if ((0, compare_1.initial)(source)) {
        target.clear();
        return;
    }
    // eslint-disable-next-line prefer-const
    let castEnabled = true;
    if (castEnabled === true) {
        const targetName = (_a = target.getQualifiedName()) === null || _a === void 0 ? void 0 : _a.toUpperCase();
        if ((targetName === null || targetName === void 0 ? void 0 : targetName.startsWith("IF_")) === false
            && (targetName === null || targetName === void 0 ? void 0 : targetName.startsWith("ZIF_")) === false) { // todo, interfaces are also classes but not inherited
            // using "instanceof" is probably wrong in some cases,
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof
            // @ts-ignore
            if (abap.Classes[targetName] && source.get() instanceof abap.Classes[targetName] === false) {
                // @ts-ignore
                if (abap.Classes["CX_SY_MOVE_CAST_ERROR"] !== undefined) {
                    // @ts-ignore
                    throw new abap.Classes["CX_SY_MOVE_CAST_ERROR"]();
                }
                else {
                    throw "Global class CX_SY_MOVE_CAST_ERROR not found";
                }
            }
        }
        target.set(source);
    }
    else {
        target.set(source);
    }
}
exports.cast = cast;
//# sourceMappingURL=cast.js.map